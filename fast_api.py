from fastapi import FastAPI, Request, HTTPException, Depends, Header, status
from fastapi.responses import JSONResponse, HTMLResponse
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from typing import Optional, List, Dict, Any
from midpay import MidPay
import json

app = FastAPI(
    title="MidPay API",
    description="API documentation for the MidPay escrow and transaction system. This documentation is auto-generated by FastAPI and available at /docs (Swagger UI) and /redoc (ReDoc).",
    version="1.0.0",
)

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

midpay = MidPay()

# Dependency for API key validation
def validate_api_key(x_api_key: Optional[str] = Header(None)):
    if not x_api_key:
        raise HTTPException(status_code=401, detail="Invalid or missing API key")
    try:
        with open('validkeys.json', 'r') as file:
            valid_keys = json.load(file)
            if x_api_key not in valid_keys:
                raise HTTPException(status_code=401, detail="Invalid or missing API key")
    except Exception:
        raise HTTPException(status_code=401, detail="Invalid or missing API key")

# Pydantic models
class TransactionCreate(BaseModel):
    amount: float
    description: str

class BatchTransactionCreate(BaseModel):
    transactions: List[TransactionCreate]

class UserCreate(BaseModel):
    user_id: str
    initial_balance: float

class DisputeCreate(BaseModel):
    reason: str

class DisputeResolve(BaseModel):
    resolution: str

class MultiPartyTransactionCreate(BaseModel):
    parties: List[str]
    amount: float
    description: str

class RevokeKey(BaseModel):
    key: str

class ScheduledTransactionCreate(BaseModel):
    amount: float
    description: str
    execute_at: str

# Endpoints
@app.get("/api/balance/{user}")
async def get_balance(user: str, _: Any = Depends(validate_api_key)):
    if user not in ['A', 'B']:
        raise HTTPException(status_code=400, detail="Invalid user ID")
    balance = midpay.get_balance(user)
    return {"status": "success", "balance": balance}

@app.get("/api/accounts")
async def get_accounts(_: Any = Depends(validate_api_key)):
    a_balance = midpay.get_balance("A")
    b_balance = midpay.get_balance("B")
    return {
        "status": "success",
        "accounts": {
            "A": a_balance,
            "B": b_balance,
            "escrow": midpay.escrow_account
        }
    }

@app.post("/api/transactions")
async def create_transaction(data: TransactionCreate, _: Any = Depends(validate_api_key)):
    result = midpay.create_transaction(data.amount, data.description)
    return result

@app.put("/api/transactions/{transaction_id}/complete")
async def mark_completed(transaction_id: str, _: Any = Depends(validate_api_key)):
    result = midpay.mark_service_completed(transaction_id)
    return result

@app.put("/api/transactions/{transaction_id}/confirm")
async def confirm_transaction(transaction_id: str, _: Any = Depends(validate_api_key)):
    result = midpay.confirm_completion(transaction_id)
    return result

@app.put("/api/transactions/{transaction_id}/cancel")
async def cancel_transaction(transaction_id: str, _: Any = Depends(validate_api_key)):
    result = midpay.cancel_transaction(transaction_id)
    return result

@app.get("/api/transactions/{transaction_id}")
async def get_transaction(transaction_id: str, _: Any = Depends(validate_api_key)):
    result = midpay.get_transaction_status(transaction_id)
    return result

@app.get("/api/blockchain/verify")
async def verify_blockchain(_: Any = Depends(validate_api_key)):
    result = midpay.verify_blockchain()
    return result

@app.get("/api/transactions/history")
async def get_transaction_history(
    user: Optional[str] = None,
    status: Optional[str] = None,
    start_date: Optional[str] = None,
    end_date: Optional[str] = None,
    _: Any = Depends(validate_api_key)
):
    result = midpay.get_transaction_history(user, status, start_date, end_date)
    return result

@app.post("/api/transactions/batch")
async def create_batch_transaction(data: BatchTransactionCreate, _: Any = Depends(validate_api_key)):
    results = []
    for tx in data.transactions:
        result = midpay.create_transaction(tx.amount, tx.description)
        results.append(result)
    return {"status": "success", "results": results}

@app.post("/api/users")
async def create_user(data: UserCreate, _: Any = Depends(validate_api_key)):
    result = midpay.create_user(data.user_id, data.initial_balance)
    return result

@app.get("/api/users/{user_id}")
async def get_user(user_id: str, _: Any = Depends(validate_api_key)):
    result = midpay.get_user_details(user_id)
    return result

@app.post("/api/transactions/{transaction_id}/dispute")
async def create_dispute(transaction_id: str, data: DisputeCreate, _: Any = Depends(validate_api_key)):
    result = midpay.create_dispute(transaction_id, data.reason)
    return result

@app.put("/api/disputes/{dispute_id}/resolve")
async def resolve_dispute(dispute_id: str, data: DisputeResolve, _: Any = Depends(validate_api_key)):
    result = midpay.resolve_dispute(dispute_id, data.resolution)
    return result

@app.post("/api/transactions/multi")
async def create_multi_party_transaction(data: MultiPartyTransactionCreate, _: Any = Depends(validate_api_key)):
    result = midpay.create_multi_party_transaction(data.parties, data.amount, data.description)
    return result

@app.get("/api/keys")
async def list_api_keys(_: Any = Depends(validate_api_key)):
    return {"status": "success", "keys": midpay.get_api_keys()}

@app.post("/api/keys/revoke")
async def revoke_api_key(data: RevokeKey, _: Any = Depends(validate_api_key)):
    result = midpay.revoke_api_key(data.key)
    return result

@app.post("/api/transactions/scheduled")
async def schedule_transaction(data: ScheduledTransactionCreate, _: Any = Depends(validate_api_key)):
    result = midpay.schedule_transaction(data.amount, data.description, data.execute_at)
    return result

@app.get("/api/analytics/volume")
async def get_transaction_volume(period: str = 'month', _: Any = Depends(validate_api_key)):
    result = midpay.get_transaction_volume(period)
    return result

@app.get("/api/analytics/user/{user_id}")
async def get_user_analytics(user_id: str, _: Any = Depends(validate_api_key)):
    result = midpay.get_user_analytics(user_id)
    return result

@app.get("/", response_class=HTMLResponse)
async def landing_page():
    return """
    <html>
        <head>
            <title>MidPay</title>
            <style>
                body { font-family: Arial, sans-serif; background: #f7f7f7; text-align: center; padding-top: 10%; }
                h1 { color: #2d6cdf; font-size: 3em; }
                p { font-size: 1.3em; color: #333; }
                a { color: #2d6cdf; text-decoration: none; font-weight: bold; }
                a:hover { text-decoration: underline; }
            </style>
        </head>
        <body>
            <h1>MidPay</h1>
            <p>Welcome to the MidPay API.<br>
            For interactive API documentation, open <a href='/docs'>/docs</a>.</p>
        </body>
    </html>
    """
